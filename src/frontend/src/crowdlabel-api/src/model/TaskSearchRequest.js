/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskSearchRequest model module.
 * @module model/TaskSearchRequest
 * @version 0.1.0
 */
class TaskSearchRequest {
    /**
     * Constructs a new <code>TaskSearchRequest</code>.
     * The following are all valid search parameters:  &#x60;name&#x60;: name of the task, empty name searches for any task  &#x60;tags&#x60;: keywords that identify the type of task, for example \&quot;object-detection\&quot;  &#x60;requesters&#x60;: username of the requesters who created task, empty searches for any requester  &#x60;credits_min&#x60;, &#x60;credits_max&#x60;: minimum and maximum number of credits rewarded upon task completion; negative &#x60;credits_max&#x60; implies no upper limit  &#x60;questions_min&#x60;, &#x60;questions_max&#x60;: minimum and maximum number of questions in the task; negative &#x60;questions_max&#x60; implies no upper limit  &#x60;page&#x60;: the page; negative value counts backwards, e.g. -1 returns the last page  &#x60;page_size&#x60;: the size of each page; if -1 then &#x60;page&#x60; would not be considered and all results will be returned, e.g.:  - if &#x60;page&#x60; is 2 and &#x60;page_size&#x60; is 10, then it will return the 11th to 20th results, inclusive  - if &#x60;page&#x60; is _ and &#x60;page_size&#x60; is -1, then it will return all the results  - if &#x60;page&#x60; is -1, &#x60;page_size&#x60; is 10, and there are 26 results in total, then it will return the 21st to 26th results, inclusive  &#x60;sort_criteria&#x60;: search parameter that the results should be sorted against  &#x60;sort_ascending&#x60;: True to sort in ascending order, False to sort in descending order     
     * @alias module:model/TaskSearchRequest
     */
    constructor() { 
        
        TaskSearchRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskSearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskSearchRequest} obj Optional instance to populate.
     * @return {module:model/TaskSearchRequest} The populated <code>TaskSearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskSearchRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('requesters')) {
                obj['requesters'] = ApiClient.convertToType(data['requesters'], ['String']);
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('page_size')) {
                obj['page_size'] = ApiClient.convertToType(data['page_size'], 'Number');
            }
            if (data.hasOwnProperty('credits_min')) {
                obj['credits_min'] = ApiClient.convertToType(data['credits_min'], 'Number');
            }
            if (data.hasOwnProperty('credits_max')) {
                obj['credits_max'] = ApiClient.convertToType(data['credits_max'], 'Number');
            }
            if (data.hasOwnProperty('questions_min')) {
                obj['questions_min'] = ApiClient.convertToType(data['questions_min'], 'Number');
            }
            if (data.hasOwnProperty('questions_max')) {
                obj['questions_max'] = ApiClient.convertToType(data['questions_max'], 'Number');
            }
            if (data.hasOwnProperty('sort_criteria')) {
                obj['sort_criteria'] = ApiClient.convertToType(data['sort_criteria'], 'String');
            }
            if (data.hasOwnProperty('sort_ascending')) {
                obj['sort_ascending'] = ApiClient.convertToType(data['sort_ascending'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskSearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskSearchRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requesters'])) {
            throw new Error("Expected the field `requesters` to be an array in the JSON data but got " + data['requesters']);
        }
        // ensure the json data is a string
        if (data['sort_criteria'] && !(typeof data['sort_criteria'] === 'string' || data['sort_criteria'] instanceof String)) {
            throw new Error("Expected the field `sort_criteria` to be a primitive type in the JSON string but got " + data['sort_criteria']);
        }

        return true;
    }


}



/**
 * @member {String} name
 * @default ''
 */
TaskSearchRequest.prototype['name'] = '';

/**
 * @member {Array.<String>} tags
 */
TaskSearchRequest.prototype['tags'] = undefined;

/**
 * @member {Array.<String>} requesters
 */
TaskSearchRequest.prototype['requesters'] = undefined;

/**
 * @member {Number} page
 * @default 1
 */
TaskSearchRequest.prototype['page'] = 1;

/**
 * @member {Number} page_size
 * @default -1
 */
TaskSearchRequest.prototype['page_size'] = -1;

/**
 * @member {Number} credits_min
 * @default 0
 */
TaskSearchRequest.prototype['credits_min'] = 0;

/**
 * @member {Number} credits_max
 * @default -1
 */
TaskSearchRequest.prototype['credits_max'] = -1;

/**
 * @member {Number} questions_min
 * @default 0
 */
TaskSearchRequest.prototype['questions_min'] = 0;

/**
 * @member {Number} questions_max
 * @default -1
 */
TaskSearchRequest.prototype['questions_max'] = -1;

/**
 * @member {String} sort_criteria
 * @default 'date'
 */
TaskSearchRequest.prototype['sort_criteria'] = 'date';

/**
 * @member {Boolean} sort_ascending
 * @default true
 */
TaskSearchRequest.prototype['sort_ascending'] = true;






export default TaskSearchRequest;

