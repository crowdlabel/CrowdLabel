/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Answer1 from './Answer1';

/**
 * The Answer model module.
 * @module model/Answer
 * @version 0.1.0
 */
class Answer {
    /**
     * Constructs a new <code>Answer</code>.
     * @alias module:model/Answer
     * @param answer {module:model/Answer1} 
     * @param respondent {String} 
     * @param dateCreated {Date} 
     */
    constructor(answer, respondent, dateCreated) { 
        
        Answer.initialize(this, answer, respondent, dateCreated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, answer, respondent, dateCreated) { 
        obj['answer'] = answer;
        obj['respondent'] = respondent;
        obj['date_created'] = dateCreated;
    }

    /**
     * Constructs a <code>Answer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Answer} obj Optional instance to populate.
     * @return {module:model/Answer} The populated <code>Answer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Answer();

            if (data.hasOwnProperty('answer')) {
                obj['answer'] = Answer1.constructFromObject(data['answer']);
            }
            if (data.hasOwnProperty('respondent')) {
                obj['respondent'] = ApiClient.convertToType(data['respondent'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Answer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Answer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Answer.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `answer`
        if (data['answer']) { // data not null
          Answer1.validateJSON(data['answer']);
        }
        // ensure the json data is a string
        if (data['respondent'] && !(typeof data['respondent'] === 'string' || data['respondent'] instanceof String)) {
            throw new Error("Expected the field `respondent` to be a primitive type in the JSON string but got " + data['respondent']);
        }

        return true;
    }


}

Answer.RequiredProperties = ["answer", "respondent", "date_created"];

/**
 * @member {module:model/Answer1} answer
 */
Answer.prototype['answer'] = undefined;

/**
 * @member {String} respondent
 */
Answer.prototype['respondent'] = undefined;

/**
 * @member {Date} date_created
 */
Answer.prototype['date_created'] = undefined;






export default Answer;

