/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuestionsInner from './QuestionsInner';

/**
 * The Task model module.
 * @module model/Task
 * @version 0.1.0
 */
class Task {
    /**
     * Constructs a new <code>Task</code>.
     * @alias module:model/Task
     * @param taskId {Number} 
     * @param requester {String} 
     * @param dateCreated {Date} 
     * @param resourcePath {String} 
     */
    constructor(taskId, requester, dateCreated, resourcePath) { 
        
        Task.initialize(this, taskId, requester, dateCreated, resourcePath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, taskId, requester, dateCreated, resourcePath) { 
        obj['task_id'] = taskId;
        obj['requester'] = requester;
        obj['date_created'] = dateCreated;
        obj['resource_path'] = resourcePath;
    }

    /**
     * Constructs a <code>Task</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Task} obj Optional instance to populate.
     * @return {module:model/Task} The populated <code>Task</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Task();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = ApiClient.convertToType(data['credits'], 'Number');
            }
            if (data.hasOwnProperty('introduction')) {
                obj['introduction'] = ApiClient.convertToType(data['introduction'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('cover_image')) {
                obj['cover_image'] = ApiClient.convertToType(data['cover_image'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('responses_required')) {
                obj['responses_required'] = ApiClient.convertToType(data['responses_required'], 'Number');
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], [QuestionsInner]);
            }
            if (data.hasOwnProperty('task_id')) {
                obj['task_id'] = ApiClient.convertToType(data['task_id'], 'Number');
            }
            if (data.hasOwnProperty('requester')) {
                obj['requester'] = ApiClient.convertToType(data['requester'], 'String');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('resource_path')) {
                obj['resource_path'] = ApiClient.convertToType(data['resource_path'], 'String');
            }
            if (data.hasOwnProperty('respondents_claimed')) {
                obj['respondents_claimed'] = ApiClient.convertToType(data['respondents_claimed'], ['String']);
            }
            if (data.hasOwnProperty('respondents_completed')) {
                obj['respondents_completed'] = ApiClient.convertToType(data['respondents_completed'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Task</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Task</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Task.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['introduction'] && !(typeof data['introduction'] === 'string' || data['introduction'] instanceof String)) {
            throw new Error("Expected the field `introduction` to be a primitive type in the JSON string but got " + data['introduction']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['cover_image'] && !(typeof data['cover_image'] === 'string' || data['cover_image'] instanceof String)) {
            throw new Error("Expected the field `cover_image` to be a primitive type in the JSON string but got " + data['cover_image']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['questions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questions'])) {
                throw new Error("Expected the field `questions` to be an array in the JSON data but got " + data['questions']);
            }
            // validate the optional field `questions` (array)
            for (const item of data['questions']) {
                QuestionsInner.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['requester'] && !(typeof data['requester'] === 'string' || data['requester'] instanceof String)) {
            throw new Error("Expected the field `requester` to be a primitive type in the JSON string but got " + data['requester']);
        }
        // ensure the json data is a string
        if (data['resource_path'] && !(typeof data['resource_path'] === 'string' || data['resource_path'] instanceof String)) {
            throw new Error("Expected the field `resource_path` to be a primitive type in the JSON string but got " + data['resource_path']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['respondents_claimed'])) {
            throw new Error("Expected the field `respondents_claimed` to be an array in the JSON data but got " + data['respondents_claimed']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['respondents_completed'])) {
            throw new Error("Expected the field `respondents_completed` to be an array in the JSON data but got " + data['respondents_completed']);
        }

        return true;
    }


}

Task.RequiredProperties = ["task_id", "requester", "date_created", "resource_path"];

/**
 * @member {String} name
 * @default ''
 */
Task.prototype['name'] = '';

/**
 * @member {Number} credits
 * @default 0
 */
Task.prototype['credits'] = 0;

/**
 * @member {String} introduction
 * @default ''
 */
Task.prototype['introduction'] = '';

/**
 * @member {String} description
 * @default ''
 */
Task.prototype['description'] = '';

/**
 * @member {String} cover_image
 * @default ''
 */
Task.prototype['cover_image'] = '';

/**
 * @member {Array.<String>} tags
 */
Task.prototype['tags'] = undefined;

/**
 * @member {Number} responses_required
 * @default 1
 */
Task.prototype['responses_required'] = 1;

/**
 * @member {Array.<module:model/QuestionsInner>} questions
 */
Task.prototype['questions'] = undefined;

/**
 * @member {Number} task_id
 */
Task.prototype['task_id'] = undefined;

/**
 * @member {String} requester
 */
Task.prototype['requester'] = undefined;

/**
 * @member {Date} date_created
 */
Task.prototype['date_created'] = undefined;

/**
 * @member {String} resource_path
 */
Task.prototype['resource_path'] = undefined;

/**
 * @member {Array.<String>} respondents_claimed
 */
Task.prototype['respondents_claimed'] = undefined;

/**
 * @member {Array.<String>} respondents_completed
 */
Task.prototype['respondents_completed'] = undefined;






export default Task;

