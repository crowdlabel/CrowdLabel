/**
 * CrowdLabelAPI
 * API for CrowdLabel
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Requester model module.
 * @module model/Requester
 * @version 0.1.0
 */
class Requester {
    /**
     * Constructs a new <code>Requester</code>.
     * @alias module:model/Requester
     * @param email {String} 
     * @param username {String} 
     * @param dateCreated {Date} 
     */
    constructor(email, username, dateCreated) { 
        
        Requester.initialize(this, email, username, dateCreated);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, username, dateCreated) { 
        obj['email'] = email;
        obj['username'] = username;
        obj['date_created'] = dateCreated;
    }

    /**
     * Constructs a <code>Requester</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Requester} obj Optional instance to populate.
     * @return {module:model/Requester} The populated <code>Requester</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Requester();

            if (data.hasOwnProperty('user_type')) {
                obj['user_type'] = ApiClient.convertToType(data['user_type'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = ApiClient.convertToType(data['credits'], 'Number');
            }
            if (data.hasOwnProperty('date_created')) {
                obj['date_created'] = ApiClient.convertToType(data['date_created'], 'Date');
            }
            if (data.hasOwnProperty('password_hashed')) {
                obj['password_hashed'] = ApiClient.convertToType(data['password_hashed'], 'String');
            }
            if (data.hasOwnProperty('tasks_requested')) {
                obj['tasks_requested'] = ApiClient.convertToType(data['tasks_requested'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Requester</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Requester</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Requester.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['user_type'] && !(typeof data['user_type'] === 'string' || data['user_type'] instanceof String)) {
            throw new Error("Expected the field `user_type` to be a primitive type in the JSON string but got " + data['user_type']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password_hashed'] && !(typeof data['password_hashed'] === 'string' || data['password_hashed'] instanceof String)) {
            throw new Error("Expected the field `password_hashed` to be a primitive type in the JSON string but got " + data['password_hashed']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tasks_requested'])) {
            throw new Error("Expected the field `tasks_requested` to be an array in the JSON data but got " + data['tasks_requested']);
        }

        return true;
    }


}

Requester.RequiredProperties = ["email", "username", "date_created"];

/**
 * @member {String} user_type
 * @default 'requester'
 */
Requester.prototype['user_type'] = 'requester';

/**
 * @member {String} email
 */
Requester.prototype['email'] = undefined;

/**
 * @member {String} username
 */
Requester.prototype['username'] = undefined;

/**
 * @member {Number} credits
 * @default 0
 */
Requester.prototype['credits'] = 0;

/**
 * @member {Date} date_created
 */
Requester.prototype['date_created'] = undefined;

/**
 * @member {String} password_hashed
 * @default ''
 */
Requester.prototype['password_hashed'] = '';

/**
 * @member {Array.<Number>} tasks_requested
 */
Requester.prototype['tasks_requested'] = undefined;






export default Requester;

